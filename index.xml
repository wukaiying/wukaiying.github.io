<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kaiying</title>
    <link>https://wukaiying.github.io/</link>
    <description>Recent content on Kaiying</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright 2017 Your name</copyright>
    <lastBuildDate>Tue, 11 Feb 2020 11:14:48 +0800</lastBuildDate>
    
	<atom:link href="https://wukaiying.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My Second</title>
      <link>https://wukaiying.github.io/post/my-second/</link>
      <pubDate>Tue, 11 Feb 2020 11:14:48 +0800</pubDate>
      
      <guid>https://wukaiying.github.io/post/my-second/</guid>
      <description></description>
    </item>
    
    <item>
      <title>hugo&#43;gitpage搭建个人博客</title>
      <link>https://wukaiying.github.io/post/first/</link>
      <pubDate>Tue, 11 Feb 2020 10:01:25 +0800</pubDate>
      
      <guid>https://wukaiying.github.io/post/first/</guid>
      <description>安装hugo brew install hugo hugo version 生成blog根目录 hugo new site blog config.toml 是配置文件，在里面可以定义博客地址、构建配置、标题、导航栏等等。
themes 是主题目录，可以去 themes.gohugo.io 下载喜欢的主题。
content 是博客文章的目录。
安装主题 https://themes.gohugo.io/whiteplain/
使用hugo写文章 hugo new post/my-first-post.md 设置文章相关属性
title: &amp;quot;My First Post&amp;quot; date: 2017-12-14T11:18:15+08:00 weight: 70 markup: mmark draft: false keywords: [&amp;quot;hugo&amp;quot;] description: &amp;quot;第一篇文章&amp;quot; tags: [&amp;quot;hugo&amp;quot;, &amp;quot;pages&amp;quot;] categories: [&amp;quot;pages&amp;quot;] author: &amp;quot;&amp;quot; 预览 hugo server -D 确保本地网站正常，hugo server运行后在本地打开localhost:1313检查网站效果和内容，注意hugo server这个命令不会构建草稿，所以如果有草稿需要发布，将文章中的draft设置为false。
将hugo部署在gitpage 在Github创建一个仓库，例如名字叫blog，可以是私有的，这个仓库用来存放网站内容和源文件。
再创建一个名称为.github.io的仓库，username为GitHub用户名，这个仓库用于存放最终发布的网站内容。
进入本地网站目录，将本地网站全部内容推送到远程blog仓库。
cd blog git init git remote add origin git@github.com:wukaiying/blog.git git add -A git commit -m &amp;quot;first commit&amp;quot; git push -u origin master 删除本地网站目录下的public文件夹
创建public子模块
git submodule add -b master git@github.com:wukaiying/wukaiying.github.io.git public 然后就可以执行hugo命令，此命令会自动将网站静态内容生成到public文件夹，然后提交到远程blog仓库
cd public git status git add . git commit -m &amp;quot;first commit&amp;quot; git push -u orgin master 过一会就可以打开.</description>
    </item>
    
    <item>
      <title>Kubernetes中leaderelection实现组件高可用</title>
      <link>https://wukaiying.github.io/k8s/my-first-post/</link>
      <pubDate>Tue, 11 Feb 2020 10:01:25 +0800</pubDate>
      
      <guid>https://wukaiying.github.io/k8s/my-first-post/</guid>
      <description>在Kubernetes中，通常kube-schduler和kube-controller-manager都是多副本进行部署的来保证高可用，而真正在工作的实例其实只有一个。
这里就利用到 leaderelection 的选主机制，保证leader是处于工作状态，并且在leader挂掉之后，从其他节点选取新的leader保证组件正常工作。今天就来看看这个包的使用以及它内部是如何实现的。
基本使用 以下是一个简单使用的例子，编译完成之后同时启动多个进程，但是只有一个进程在工作，当把leader进程kill掉之后，会重新选举出一个leader进行工作，即执行其中的 run 方法：
/* 例子来源于client-go中的example包中， */ package main import ( &amp;#34;context&amp;#34; &amp;#34;flag&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/signal&amp;#34; &amp;#34;syscall&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/google/uuid&amp;#34; metav1 &amp;#34;k8s.io/apimachinery/pkg/apis/meta/v1&amp;#34; clientset &amp;#34;k8s.io/client-go/kubernetes&amp;#34; &amp;#34;k8s.io/client-go/rest&amp;#34; &amp;#34;k8s.io/client-go/tools/clientcmd&amp;#34; &amp;#34;k8s.io/client-go/tools/leaderelection&amp;#34; &amp;#34;k8s.io/client-go/tools/leaderelection/resourcelock&amp;#34; &amp;#34;k8s.io/klog&amp;#34; ) func buildConfig(kubeconfig string) (*rest.Config, error) { if kubeconfig != &amp;#34;&amp;#34; { cfg, err := clientcmd.BuildConfigFromFlags(&amp;#34;&amp;#34;, kubeconfig) if err != nil { returnnil, err } return cfg, nil } cfg, err := rest.InClusterConfig() if err != nil { returnnil, err } return cfg, nil } func main() { klog.InitFlags(nil) var kubeconfig string var leaseLockName string var leaseLockNamespace string var id string flag.StringVar(&amp;amp;kubeconfig, &amp;#34;kubeconfig&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;absolute path to the kubeconfig file&amp;#34;) flag.</description>
    </item>
    
  </channel>
</rss>